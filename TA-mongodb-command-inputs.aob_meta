{"basic_builder": {"appname": "TA-mongodb-command-inputs", "friendly_name": "MongoDB Command Inputs", "version": "1.2.1", "author": "Hesc", "description": "\u4f7f\u7528Mongodb\u6570\u636e\u5e93\u81ea\u5e26\u7684\u6027\u80fd\u67e5\u8be2\u547d\u4ee4\u91c7\u96c6\u6027\u80fd\u6570\u636e", "theme": "#4fa484", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAAAXNSR0IArs4c6QAAIABJREFUeF7NnAd4VVXW/n+n3ZrchAChg9hAQVQUBGWEgREBKwJ2UFRUPlTEMrbR+cSOozMWnFHBLigKCjgqgigqMo7SpElHCDWk5+a2U75n7XNvAAcRy/yf//HhSUzuPffsd6/yrnetHc3zPI//7y7/kVzcH30yHU39zvP8r5omX+X1+m+6Gu3/LUAeaumehlqP+l5WJwvL/WDP+gSgHBA/tup9AfpNsfGB/+8CtLdx+jvsZGxqa6rYvHEjmzdsYPXKFWzdtJ4tWzdSVraTdDqFjkk0r4AmxS3440P30/6oY33jUE8Mniv31dF1DU/+ZX/lgyn/p1DfL+g/F8L/IkCyIn8hex7YY92qVVx+yQXo6RocO0nAMrIL1PA8B03LvicLSLhFMdffcC+HHXYETZs0oSBWQDKZZNeOHbRq0xpME0/Ts5+k4cP127nbbwxQbi9dcF0ybhJNMzB0i0wixab1a5nw3FN8MvdDQnod4KCbYIZ06sKyODBMU+GpXCft4tkudhIsL0jAsTi2w/GU76pg9Y6ttD3iMO68688c2eF4rKCJrvtgCUD/6bA/13ayBvtbu5jnunieTVVVGal4nMLCIhZ8Mpf7x95NbaYS28wQbGDR6NDGHH5UW1INQwQsHV0LKpeR2OR5LgHDwE5lsJM2rq2x5ftt7Fi2lrqqJOG4gZ7wcPQAmmtQWNSQcX97msM7HE0w1OCXIfEj7/rNLMjxPDzHxvNSTJ02hafH3odreGiuA0GdmrxSOvY6jsZtmmHpJoc2bMkxHTrRskVLolY+obSG7hoSYPAwcXSHOiulvpbEq1i8Zjkbt2yisqaG/NIkn82Zj70zRURiUcpG0wpp0f5Y/v70P4gWFGKGgugYvxqs3wggWZRDqrqCyy8cwqZNGwiRJGUkScQsep4/ADtm06HtkZx7Yi/ygjFwdTRPx/Q0bFxMV5OMgYsNnoOr6SpY666Oo6fRNBPHc7G1DJ/vWMXszz8mzwyzcNZn7Fi1ncJMBDetoxthnn79VTod2y0bi35d2v+VAPkLyrgOW9cvZ/ig8zHqIBWqJtUwzRGndaKwTQsGdDqZHm2OJc/KV8Cg6ZLPcDXhLyYZzSXp2hjBEFbKxRDwNKEEHrrnoWl2Nn3J54GnS5By2FC3k0lz/0ld6S4WzZpPuiRN2A7hxBoy54tFaGJDuliRfPfLotKvBAgydpK3Xn2WFx59nKRWSzKYpKBdMw7r0ZleHTrT84RuxKwIpmMok3c9WXQ2HUu80TUyeKwq20yt53J8wzaEZDme4iD4+QkfTAnr8tWTjOdBQKPGS7BpRwnvfPohJRvXsvzDr8hLFfCPZ6fSrtMJGOGwgueXXr8YIMU2bIdJLz7Bc089SsAOEo9W0rrvERzasR3n9R5Mu0hLglg+/9FlsbJcsQL5TizIw9VdbMfmyU/fYWddDfedOZyobSgrE5DkHQKO/POJm89vJJ2rlO46pEzY4VTxycJZrFz2LV9NW0Sg3OTGG+/l7KGXqYyosqO8r56hHhxkvxwg2UHXYehZf2Drxu+ojCbpOuBkOnQ7gUGn9KKxFsOVh9EMfyGKPRs48p+kYsWeXVKmzTtLP2HelpWUbN/F1T3OYcCRXQiIxWUBsvcyALE+gUasS24vbFvup3sOdXqarzauZM6Xn7Dk0wXUrYwzYsTtXHLZlQRCQTRDnsV3uYO9fj5Akq08V+3krm2buWrYuWyt2Uy3i0+ie/eTOf3YPsTsaBYAf/dVBFAln4GnOTi65luPl2Hat5/wackKaiM6m7fvIlRp88Tlt9I+3BhLMWaPeoAkkO8h1PWVimyE4XhkDI+4qbGx/Hte+nQyJe+toHxFLccc2428Bnnc98A4QpFYFqRc/XZgqH42QMr3XZvqqiouv+JcSkqX0/XsU+nevTv9T+5NOK2DKylWQPTwFDPeQ/t9V/FImS6frVvIjBXziYdd0obBth27SVYkaBUoYtzlN9KWILqm4ei6GCC6498pR0ezt1KbIL/PfZUXrI9vZcq7U1gwaz6JdXWYjk7/s4Zw6933YQai6MbeDP/HQfpZAAnXkYfKJJPcPuYaZi+aRp/zTubEU7pzRuezCXsGhucHUnGP3FJc3fMDKzq24SHPtqVmOw/Pm6JcLG2Ku5mU7qpk9+4qkrrBMXlNmTB0NFFJYIapkNHlxn6tu4+TKDurj1GqtEdzDFbFV/L6zMksmbGU1KYEmZTBHfc9whmDL8QwD87VfgZAHm46ye7S3Xz8wQz+9uTdHNK/Hb1OOZmB/S6gIGNiSIWR3U3hL35tKS7iKeAEXlt3qdbTvPDxFFa4ZTi6X3S5nklFZTVbd1SQ1HXyMOnRqDVjL7iWPFvD8HSh2HsA2suMcuVptpZVADmaMLMM35UsZ/IHM5k3YwGBXQ5BL8K0eV9SVNgIjOBPRqODAkiey/PSLPtyLqNGXoGBTbhTjM4De3DtmcOJucWEXKmtNH93JSDntlTyluYDlNF9uWPa+gV8uGY+jqUh5iQxRH5eWRmnZGcltlii4eE6NtcefxpXdOtPyBPS6Pi1es6C9vG1nJv4TujpDo5rgekwa8Ucps39iHWTFxD18gi1aMbMtz/Ds6IYxoHZ9sEB5IKdLuP33bpgUE2m0KLHhady6eALOCR6KGHbrU/FPn/ZO0v435uuRyJgsyldyZ9nTCATtQmbFpou0cqPB1U1dWzeXo2t6Viah61BtMbhiSv/SOdYc0x1b3dfd/qx8CGJICukuYbL+A8mMm/6HMoWb0dL5zP2wUfpfeZgdFNoyK+KQS6u6zLhqXG88txTpMwaDh98CgP7n85pR59MNB3DM5LKrCUz7QuQ/My3jqAE9qDNqwtnM3PDvzFCkB+MoOmKLaqgUl1dx6YdNbiaIdWYkkpSHhwRKuKVy24lz5NKf4+I5mfG/V85viOeLollR6qUv82ayDd/n4O+vZBYcZi3P1pAOJr/awFySNRV0bfriViZBN5RIXoM7c+Isy6hSSaMJ4vLupHKVSqk+FYj9ZQYkyzDwmGVvY37pk+gLJBB9rdBpGAfE4/HU6zfWoGrmZgqC2q4no7uulzbrQ+XndAXzfUwFe9RgeugAJInSFg273/7JZ+/P4clb81Fd/O5/f6nOeucQX6s/BECeWAXkzSNzSMP3smHr79NLVV0u7Y3g08/k86tjyLkWiozqQdV6TyXuPYA5AMFjgFvrZ7DlGVzqQuCYbtEzSDRSMRnuB7EE2k2bK0gI0WJlBlKPRRy59LYDDJp+J00MEJZK93zkfuiJBvmZhecjUfiroZHxnO5a9JjLHntLezdjZn0zie0aXu4qtd+PkASmF0P266jd8+OBGptkq08+l5zLneeOQInlQHPqMelPv3utamqdlIGplNGgtHvPkq5lVDlhjieFKVFsYJ6oT2RSLN2825sTBWDcpboaa6ymGu7DOCq43+PVHXZ1HdA99jzS6HkPsn8umQ578ydyocTv+RvD73AqT37Ypoitu2/XjuwBTkeb02ewMOPjCXfraXtdSdx/YCRHN2wtXp2tYa9APlhdlHCZzZeL03v4o4PnsBTnMdfulCBWCyGRBwJ4nUCUEk5GfmJJjEod/kPX0iQ96/6MxGRPnSfPR/spZ5N06gxU9w3cSyfvv0FXRp04dk33kczLUVI93cdECDXc7nqgrNYs2YRVcEa+t10HneedS1hV9ziAP6f87Zcta653PvZGyysXo7mCvPL7ZZO0AgQjUQJOJBOO6zauBNXk+yWA8h/recZmK7L/WcM5fTWHakNasQSBweQioPZWJgx4csNS3jzzddY/eY3TJ+9lEbN26i6bn9udkCAHNdm1LDBrFkyn+iQDgzv358BR52Kp0VUXMhZwg8fMxeO1J6YBnWkOevle0k0gfx0Zh/LkOIzP7+AkCsSj8bK9dvIEEDLEsg9gU0+0aBdpIjXLr8Ny/HQD8aCssDkABKLrrIyPDjxYT5/4ROuu+gOrhh9M6bKtv9Z7R/Yglyb1557nGeefYTOo07jz5deRYGTj+YFDmRA9VlBhA0hid9Rw6WvPwL5Oo3VwnOQ+tkoP5RP0JR7eqxYvQVbC/n30EXfFvFMrA7SukEo7TL1irtoFWmAaR+8BeVipM/0Uzwz62U+nTwLqySfmx98iN917wOicZv7utoBAZIFXjtsIMt3LeJ3F5zK7ZeOJJgOonuiHR+EZKB5JA2Xd7Ys5qF5U/EsnWYRn+z57/YBMnWLgmg+EnZWrNmMrYUVr1KlhTJ923+9o5OwNP7UYyAXte+m3psrXnNWu7844rP7rJspopbi611rmPDKC5S8+x02Ed58ZzZNWx3m87K9rgO7WCbB6b06EetaxEWDzqNv1z6YGUnBflr+yUsTCQKunv40X9duU1Jp40gUS9fQtTp04ThK8zEozC9QAK1cU0JGYlB2RSJ2KXcTIF2NhAXtMhFe+597CGSzghLWsmAdIDTu87jbjDIefvkJFj7/GfnJEGPHT6Dbqf0wNGOfjPYjAKkcz8Y1q7nowt4cd8kJ3Dx8JMXR5li2iSb9rIMEKBky6fv8HZQGHHTNI2IEKYgEsLx4vQWJeB8N5xEwLNZu2EnSEbdyfFlVHFK6HYqMil4NMUfj3THjyMu6mJ8RcwrCT26bekF1KMW4N57mX89/TKDMpdd5F3L7vX/BwOdEuYC9H4BccOThXKa/9TZjH72RE67pxgNDbyWgRQk6pq8TH8zMg+ZRqdv0eflu4gFZhYHlQJP8EJaW8J1MMXFxM4P8aAGr128jaVuYmsQfv9yQy1ZffXYdseGxy0dzUrSpkmaV9WSt6ODg0YmHbKbMfYOpL/4Td9lOIs0PZfqsBUr13Dub7Rcgz8mwYvEi7rz1VrbUrqDnTacx9twxeEg6Fu7sm/xPXppHPKTxu4l3kDJ1MrqG5Wg0iphEzLSyihxA8lAC0JoNO0k7AUykx7ZnukMAMhWv1xAb7tu6A/f3u9jf8ax7HZTbZ2NfIuCwYP1XvPz8JEpnryROlM8XrcG0ggcBEBnuG30jcz+ejd4qTe+Rp3PzH0aQ1sIEHQmwBw9QSdSmzyv/S8DWcAyJlg4FhklMsddkPUASbsPBCJu3VZFIGxiuq17rX/LVVyXl00UBKM5YzBh5LyEBSPmhIks/uWd+1JdSBL6u+o6nn3qOXTOWkdJjfPD5IvIKCn8KINGcM4wcfC6rVy6jUbdG9L36DC7rNIiEbhKy5cEPHqBvM6UMmvEkIcdQMgZ6grCj0ygcwTAS2RaQvy5dM9lZVkci6ScCFYP2ymKe66sDmqFRmNCYc/NfCKREapGyRRzwYABSrRHVJ1uZ2cITz/6Dja8twNEa8M7cBRQ1Kv4pgGQjMpzf+xR2b99KUb/WXDhiIOe17Udc1xVAotUd1LNoHv+uKuHCOf8g4ljYUu9oKRUzigIWMUO6qHstSjco3V1HOinWJRuV+92euiyX2CWjzRv9KPlJT0m8Pwcg1XzSYaOzkydemsjKCXNwtSJenf4xrVu18eu2bOmx3yzmOGn6n9QJt66GWL/WXHnjUPoWdCNhWYRdYUcHD9A3VSVcNPsfBDwDWzfRPIkiHgW6QYOgBF3fjXJlXUVFinQqV178uMdISTd39KPEkn6z1nQO3oL8npzBTioZ99pzLHv2fVwa8tKbH9D20MPRDMmiPh/aP0B2kt6d22M4SZqdcSTDRw/l5NhxZPQgEcdv9h2sBS2p3c4FHz6NKUKteJiqXjUs16ZZnoXhZnwdOxtoq8rTJFJCDvW9LOg/gRKA5tzwMLGkjmtoBB2JVFla8CMcdm9uK7V9lVfNg28+x5Lx7xEItmTGnC8JBqOKB0nHVz3p/sZfbDtJr87tsOwkLQa0Y/iYy+he2FlNXQRdMemDt6ANbhVnTh2XFdKz/TEhYxmbJmGLsOED5Erg9KCmyiER90XnA41PiovNvv5BClKGYr/iYs5ec0FqE/1w41uoaFL1wEmMM6nxqnjgzX/w1d+m8Pfx0zj+lL5gO3gBy+/s/hhArpum14ntMTJ1tO7fnktvuIyTizpjeham52CrvdoTOw6UXmuiGn2f+xMVYWkiChJ+gNRsl4hu0zDPysqoPpmprXKJC4f0TNSsUXZhqgGZ5TqWp6nq/9MxjxFK2n7PbK92k3RbXdG6VdJ0s+VD1mWkKJX6Dp1qr5IHXnyChS/8E93Jp7CwmEf/+gxtj+qApeRga/8W5LoZ+vc8gVR5KcW/b82QEUMYcGQ/AorhSgQSjnJwAJVbGc564V5Ko/u6iSfdUM2hpUyGuTa60mo9auMe8WoNzxX9WWxWUru/HeJK8lW4WMD2eO/6ByiSWkZe48lEm0vQCmAZOtXVtRQWNiCVTBIMWLiOg24FiNdUUl2RYPGSpSxe9jXzlywitWknKbFYR9wqSH4sxvmXXsLlI2//MYAchg3pz/Y1K4mcWMi5Vw/iouMGqR2URbnZoKEgkt2TkLR3QZj9uby+IgoXTniAzYF0fTNRjR5I61lL0dAKEVN9M79iT8ahutzF9fyaSFRNaRkJUNnbEkhnKDBDvHzpzZTvLmfJ4m9Zt3o1tVVVpBJJxZXiiVrqEilqq6qJ19ao+6hpER1s28ARtqL4kG/R0kerjdfRpEkx4XCI6rjLB18s+xGAPId1y7/h3htHUVYc5/eX9OK63iP8Hrt0CeShlZaapXHyM1U2/KDDKSVE0OTmac/x5a4NuBIr5IFkMNFxiAaCxGodGpkmmpOmtqqW6t117NpRhZ1MY4lLZmxCSRfN9nDtDJ5to9kZLBnezDh4hk5GqIc8k1iY45BxXMxAgAaFDWhSXMzxxx9PcZOmxArzsUxddVWNYICigkKaFjchEAmjmzJMKqOAGquXL+e6kXcy6/NFewASl1GCkWoWeMjk5EP33MbU+ZPpO/w0br5oJKF0BFMTk3YxNVM19qRW0kxDTZ6Ggr6gXrp7Fxs3bGTz5s2U7tjBytISVmzdiOd4mIkUTsbBSDmkk2kytkPQ1TFNDcd1cGzZBn/6QzN11XKSDFhUUMDhhx9Gw+JGtDm0DYZlEg4E1NBmw8bFNC4uJhqLkJcfw5IkoFpHMirsl3NS19qyjYrkSpNfaj1pDFh+a0q6sTIb6ens2rqDYRdew1sfzBOApCXh4cosYa5Kl0yVTvPmqy/z1IsP0rnfKXQ+vCNGeUItKO1kqKquoLKsnC3fb6G2uoZEXYJkKoXj2JgBS6XJVCqFkR3zVRvgeUQieTRt0pjixk1p26YNkfx88mIx9fnBSJimTZvSsKghzZs3UdV7XiRPVRySqaTHLyBKM1RogC/daNgyDZsVyA2xEC1AXW0tdsqmomI3NXW1tGzZnHB+gVI4lcQiXVrl5lnJMZvh5DZbN+1k2MVX8sJb032AXCfFk48/zIIvPyNTWUtZeRmO4yjdJi2CqeYQ1UJYael2O9iGixWxiEWjSsdp2bIFDQoaEIpGkAcMhkLECmO0aNmKRo0bUdigkGAwpLoHObFfwphpWX7s0jRsmT90RRKRoJYdv/Q89QyZVAYtYGGrnYdkRRWrVn6npmLT6TRlZeWqsO3YsSOHHHIIhmkxd85slixcSq/f96SisoKl3y7h6pHXkl9Q4McjlSH90kXFvroEpbt3sm3bVkrW7+SZp57nb8+/7AO0bMkiRgwfwJFtD6e4aTH5eVE0kSYsj1h+lKbNmtCqRRuaN2tBXmGR8mEZABdvk1QsFuPYNhnd5zJqrrA+pPrzRGLy9ecP1OCTf4lA5ZcbYsUqV/njLlmHV5W6LERxGX9KxE1l+H7jBt5/75+MvvFG9dq1a9bw0axZ9O7dm46dOhGvq+HZZ55lzJhbVFkxccLznHZ6b1of0tYPmK6agMx2fj2mTXmL0vIyjupwJJod5N677ue+cU8KQLY3d9ZH3HHLJXz+xcfYXgZDzw71a44qDCXNZhyZ6BKHNghoJoZh4tp7BnZkAY6moSs51W9B50YnfNnCr29k1+QSCxJrUfOKWRYtsU/9U77jgyE3kh2XWKM6D5LRNE+l7/FPPqUAkngk9/hqwQK+XvAvrrn+f3Adl2fGP82NY24hlU7z8ksvMuyyoYQi4fqBUAWQsHtNx06nVKySGJuI25zeewB33POwAJTxFn/9b0YNP59P501XM81+beTzHJ+dZGeYNRm3dNW8jixMTXGoxqCM1uWsxm8K5sijBD7lNgow0SKzAOFhGSapeB3haIRMyka3dCoqyzEMi2g0T8IFrqex8JuFrFr1Hcd37kz79u2xJO+7Ho89+ihjxtykgrlYsmzrXx58mFE33ais+rFx42jVuo2y0EQ8Tu/ef+CwIw/zW0BZGuczlqzmLV7jGiTq0pzepz/XXH+7tLrT3rat33NBn558NG86RlRkqezEew6mbBEj1iErF9VNuUB27L++6ZSdGxRX8KUKncrycnaXl3NIq9ZYVoCqqmo2bthAg+LG/O899zDw7HM5+5yzsW2XiRMnUJuo47N588jPj/HixAksWfot1dXVdD7hWG4ZcxvnDDyHs84+Q7nxow8/xC233epLIIJ7xuaZvz7B8BtGKfCffORRRt1yo3reks1bmPr2W1w3ejThkDQF9pQgok4IkUylbDLxFOUVVYy4YiQXXHSVD1CqroJ+XbswcdIEsNJolkllRTlHH93Bn0fMTZQqqdWfc66piyv9ZtJrkxkyZAhlpbu56847GDJkMOcNPg9bc3lv5vsqxvx7wVds2rSelya+zPQZM3j11de5cOgl9OrVgysuG860qdPYtm0nkya/zl1338XMmTNZt3odt/7xVs7s15eZH8zGdev4asFC/v7MM7z4ykvIzOpDD93P7XfcjkjWYunSaX3qL49zzS1jVKYbf/9fuHjkFRQ1bKjCwTPP/J2rR4wgFJahiz2VgGzooiXfMum112nRrDXHH3c8f33sCXr/7kw/BsnxgdM6d+LqUZfR9XddicbyletEwtFsx1FsKhtWPY2XXnqF1ya/wflDhtCsaXOee+55FRAT8VpuvuVm3pk+jZSd5rLLR/D6K68SCJhcN2oURxzejlHX3cCwi4cy7vHHaNKkgBFXXsOYMWPIyyvk3vvu48UXnmXqtKm0anUIXbt349wBA3jz7WlEIwa7y6oYNXIkk954XaXpxx97jOuuH4kVCeHpOisXL2XD+o2cOegcxcIfH/sIfc/uT/uj27N61RqWr1jBoCHnYcihl3qAZGXCuSw14ick1rZtzjt3CMd1PMUHSFzkD52P4I57buaUPj3w5IxF9mCRXj9i4gMkI7dOxuWcc87ln+/9Uwn4Z589kPemz1DB79JLh/GXvz7E1u3befjhR3lj0mQF8soVK5gyZSpj7x3L6Btu5rrrRtHuyFbcO/Yhep3akx49e/HUX59m3hezuXz4MPqfcy4B3WDo0KH0O30A5w8ZyOp165gxYya33TJaJZL7xo7lhBOPY8DZZ/LhR7MoLS3nwvMvxjB0pkx+gw1r1qjjUlYgSK+ep6oYJgWAdFf8GJlLGn44ULnEEcKY4crhV9Ok6NAsk/Zczux+DIMuPoMLL7tEEpV/ExWtVW2hSJs/Y6hDxmPwoCG88vIrNCgoYuDZA3l7yhQ8w+X22+5i1PXXUFhYwMUXXcHbb79BKBTg62++YdPGzQw5/3xuufmPDLv0Ek48oQP3/u9DFBYU0rtfX2654VY6n9CR/IIoRY2accXVV1BdU8U1V17L0e3b0fG4Yzj9tD+QH40wd+4niiVbAYNGxY1p2qKlIqHSQpYZonhdnHAgVH9EShKd7eRGiv1pkfqmo2LbhrIgAWn3rp3cccefCAQb7QGo30kd6H16N6676QZsbFLJWvKieYr2K/GqXlPRMVyNy4YNZ9wjj9KscTPOOuds3nn3HUzTYfT1N3HJsEvo2u0kbv/j3QqcgQPP4anxT/O3x//K6tVruffPfyZWkM+zE57jkYceonHjxgwePJgbbriVY4/pQLOmxbwx6U1O7d2LO/50myo10pm0OhMmMdGQmSGVfRwVL9PpjBLy1VNmVx0Mh0nHE1RV1bB27TrWrVvD2nVrqaypJZ2widfUUh2vJZWqw03bOGlbAZhxZGwyiGEEGHrV1XsAOuN3xxOKuVx1zVWE8yMETYNjO3XEVEOOuRMT0v3VKd22ixEjruGYDscwZPBg7r/vAY48qj1/uusWZs+ZR1HDBnTp0gXTDFGypYRUMq4IWigYVAWnHMs0A6biH9LFlizzwsTnWfjNMsaPH6+sd9iwy+ja9QSuHzNazSJJ3bdl6xa2b9/OhrUb2bRpkyprqioqiNfEFYWoqK4gmZKSJ6nqPbm/I1bjOXi6rYpfy80nXucSChfiWjqtDmlFq5atOfywwylu1pxoQQGRSAPyo/l0OOYwYdyuKmMG9uuGrtXy6pRJ2cpW6Hg6W75KRMoee/R0EskkdbV1qrQQ4iVmKZW0OsZk+64pOyoZTBW/jtRvHiErQMpOkqitY/fuUrbu2E7J1hIGDxnCS6+8zPRp76lAXVWxm/Hjn+H5FyYy/PLLqauuIpNJZYeKs7008XRbiKxBKBAgkhemqLCQNoccQmMpbwqLaNCgAdH8PJwGARat+Zbl//6GrZ9/zz3jnuXknr9XVEA3DDx1Isg/2qCiyl5D1z5AaJzTrzu1VSW8/9EH/ukY1Rv3z1PkmnsqrIlS5ziYng9YPBln4+Yt7CwtZfvmLZSVV5Cx0yQSCXaX7sLOZNhdWkZdMkkqlcZJiwWlFDNO2zaBsMVTz4zn0EOP4PPPv1CuFApYnNili+I/M9+ZSSwWoSA/n3A4TEFhoRq6ihXECARDKuMKEZUNyi1QlXNy7MGARMDl6y0reX/2+3zz0ruYtY2Ys3g1mpHLZP4Zkv3NT0mmU5q0kL6LLhjA1jWLeOiRccTjtZSVlVFTVUU6maK6upLamhqqqqupLK+gRnw3kSCtyFVKiVlexsOwLFUmeLoo5+IAAAAHN0lEQVQcMLGJRsKKEbds2YqiooYUxPLIj0QJR6OKm8jJ5rxYhGbNmtGoUSN0QwQsnZqaOsLhSLZi30N7/VrNQ1dg5ARmacpr6sSQOq8qQdpTp9GoCziUxSuYPP1dPn33A6z1Ndh2AXO+/RbLkiGwvS+/gvBTkX+J4SiA5IdTJr/E+HF342Y0dY5BKnx5oYjhckhCSgb1JqUru4RCQap0hyM7HkGLLkfQs/XRNC1qSn5Bocom0bwQATOoYpgMa2fcjD8xI3Eh2+aRZrJMbliuUFGXsrJSFi1epAy31+/7YCog9hr0VsKMnIz2++f+QRnVa/VruD2tGjJGht3UMWn6FL5+fz5VC3eBG+DUc87jjgceIGzIsMDe7Y8sQLn2iq90ZS1IaTU270yZwpZ1K6msqqG2tpry3aVs37aFutpqBYoyOdFlRN+VBzRcCpuatBnUjfPOOo8eeYfgmjqOZpLWdMJpxxe//G6+X5Fku7Ky27kJEUNtkUYmk+Tjjz9RFKF7tx77NAZ+sN3+feovX6uW4lNmHdOmw06jjqnvTWXxl19TMmsNeU4RDY88jAmTJ2GFQuokds5O9gVq30+qb/tIynSk4PMy2CJZirv4WhrJeJzy8nJ27tjGunXr2bz5eyp37+brLz4gndxBqFljWgztw6V/6M+JjVuiOxahjOi8fg8sN7y090fv0bAl6GZ/48H8+fMJBAJ0Pemk7B8Q+CE0e2ooFVCzdqDGkaUGDLjsypTz6sx32DJ/Kas+XYieaUh+cUuenTyFZsVN1Bk2/7SP/3wHuv6jL/affy8ju0CxILEFpdX4OtDYe25m3nuTCMjZ+AZROlzQg66ndKbPYScSE2Fcl/NhMgj+g4fI6kGKsqiWTa555bFo4RLVVurSpasquX9qckw5mWLGBraR5Hu7hBdnvs/mfy1n2xfriVTHcGIRnnrxRdp1PEaVJIbqecmn7+8ka+7PZGQVrX0bh3v3wPfFtX6YSWkyEjE0nKTNmCvO59tl89XpQyffpcfFPWl77NH0OqUXLbwCzIyMp/gyZ+6Sj87NT4ueqn6X/Xsey5YvVy5wRLv2aI5dXxL4O60CYr175SxTFE4Z9Vu8bQnvzZ1J+b92svWLJWSMIgKhpjzwxJN06dpFiYCqh6GEav+I6L7X3m6bPa30a/6wgAjqrpNkxMWD+G75UqI6pA2HQ884irwODRl02lm0L2xLwAsRs8NKTPMFcv/cava4yT4jxatXr6KwQUOaFhf77iPSjyad0Ozshjrk4qtVYs2GnWKLUcGUb2az6V/fsubD1dRtS1CQ10ANZT7zymTaHnGkIo3SPPKFuxwsP24Q9Zv5awBSqpPn4aRSPDbuAd5841UsT8cyEhS2CXLYgC40b9OUc08/gwK9CY1qPWzTT8UqZmQnfvxY4u9qOpVUurahJixkQf7vfOHRrwnl3VKDVWaq+HDzcr6dv5TKlWtZ+dkyzHQj7h77CL369kHGZXRL+muSLf17/cAvfn4MOmDE+uHt62U5X3deuHA+o6++Bi9RRyQg7LmaQ/scT9FxLWjQvDH9TjmVVuEiIlY+ZspSGUclfUnzquHmb60nB8XFLcVysMhIzaW7ZAyXCuJoQYsPFs7j61VLyd9ay9J/Lia5S6NJy8N58a2pSphXEyiG33gUV9r3qMG+ceZnBemfA1D9a1Wy8wX3yooyRl47At3NkKippqT0e3Q7QbP2hbTreyJ22KBVs9Z06dSZFg2bE5G+VMrGcnSlc8slrW81FGXJkQOdGlfOb3h8uWIVm77bQE1ZFeVbdrP2s6+hOoXrBbhn3AR69jodM2j5iWSfaTM/MPtXLs78dAZTFv6rXOyHIU6NzYk1yfSHBEON7zds4K5bb2Lruu9U9zTdJE7zts1pf0wHApEQ5RGNWEGEQMgkGopkm36QTCaoi0u/rQ5H5qNr06TXlrN51QbqdiTwkikFmh4I4QTymPHeXGJFjf1GgAoy+wbgn3te/reJQT9qbn62kUv6a7aTZuf2Ldx61eXs3CaT9Glc01PCXDQvghWAvIZRAuEQhHyXSiUyaLZGVVktetwmUV2rVESpCx0vX7mka+icOXAgV4y4lmZNWyJ/a6deJ/9FrvCfb/pNLWh/zySmLl1ThxSffTSbB/90N+lEHFPOpLpppT0FTGHpaRzHIhgoIplOKxfzTI1wXj5uvBbdcdBkeMuzKD7sSC65/Eq6de+uWtFKa1DjfVKC7P9Y0y/F678G0N4JVOiAzD26tk1NVSWbNmxi6ZJFLF+8hKXffIOTqFbFrR4Ic91Nt9G1+ymqORnOi6ruxqoVS5k7Zw4dj+lE+/YdKW7WkoCYXZap+zVebrLgwMz45wL1XwPohw/iSiZSKcpnjP6fLRGJ06G6plL1wyTjHCKdz3orkHji/2kL1VVVXRUVOveaJdv7CPRvC85vHqQPvDt7UWn1wl+6mJ8mdz/XSg70+v8DgSqqfe9xpJsAAAAASUVORK5CYII=", "small_icon": "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", "visible": true, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 3}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "mongodb:command", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "mongodb_command_inputs", "title": "Mongodb Command Inputs", "description": "Mongodb \u6570\u636e\u8f93\u5165", "type": "customized", "parameters": [{"name": "ip", "label": "IP", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "192.168.0.20"}, {"name": "port", "label": "Port", "help_string": "", "required": false, "format_type": "text", "default_value": "27017", "placeholder": "27017", "type": "text", "value": "27017"}, {"name": "username", "label": "UserName", "help_string": "\u6709\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u7684\u6743\u9650\uff1a(hostInfo\u3001buildInfo\u3001features\u3001connPoolStats\u3001shardConnPoolStats\u3001dbHash\u3001dbStats\u3001top\u3001ping\u3001listDatabases\u3001getCmdLineOpts\u3001serverStatus)", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "admin"}, {"name": "password", "label": "Password", "help_string": "", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "admin@123"}, {"name": "database", "label": "DataBase", "help_string": "", "required": true, "format_type": "text", "default_value": "admin", "placeholder": "", "type": "text", "value": "admin"}, {"name": "command", "label": "Command", "help_string": "", "required": false, "possible_values": [{"value": "hostInfo", "label": "hostInfo"}, {"value": "buildInfo", "label": "buildInfo"}, {"value": "connPoolStats", "label": "connPoolStats"}, {"label": "shardConnPoolStats", "value": "shardConnPoolStats"}, {"label": "dbStats", "value": "dbStats"}, {"label": "serverStatus", "value": "serverStatus"}, {"label": "features", "value": "features"}, {"label": "dbHash", "value": "dbHash"}, {"label": "top", "value": "top"}, {"label": "ping", "value": "ping"}, {"label": "listDatabases", "value": "listDatabases"}, {"label": "getCmdLineOpts", "value": "getCmdLineOpts"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": "", "type": "multi_dropdownlist", "value": ["serverStatus"]}], "data_inputs_options": [{"type": "customized_var", "name": "ip", "title": "IP", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "port", "title": "Port", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "27017", "placeholder": "27017"}, {"type": "customized_var", "name": "username", "title": "UserName", "description": "\u6709\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u7684\u6743\u9650\uff1a(hostInfo\u3001buildInfo\u3001features\u3001connPoolStats\u3001shardConnPoolStats\u3001dbHash\u3001dbStats\u3001top\u3001ping\u3001listDatabases\u3001getCmdLineOpts\u3001serverStatus)", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "password", "title": "Password", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "database", "title": "DataBase", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "admin", "placeholder": ""}, {"type": "customized_var", "name": "command", "title": "Command", "description": "", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "hostInfo", "label": "hostInfo"}, {"value": "buildInfo", "label": "buildInfo"}, {"value": "connPoolStats", "label": "connPoolStats"}, {"label": "shardConnPoolStats", "value": "shardConnPoolStats"}, {"label": "dbStats", "value": "dbStats"}, {"label": "serverStatus", "value": "serverStatus"}, {"label": "features", "value": "features"}, {"label": "dbHash", "value": "dbHash"}, {"label": "top", "value": "top"}, {"label": "ping", "value": "ping"}, {"label": "listDatabases", "value": "listDatabases"}, {"label": "getCmdLineOpts", "value": "getCmdLineOpts"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}], "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nfrom pymongo import mongo_client\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    ip = definition.parameters.get('ip', None)\n    port = definition.parameters.get('port', None)\n    username = definition.parameters.get('username', None)\n    password = definition.parameters.get('password', None)\n    database = definition.parameters.get('database', None)\n    command = definition.parameters.get('command', None)\n\n\ndef collect_events(helper, ew):\n    results = None\n    opt_ip = helper.get_arg('ip')\n    opt_port = helper.get_arg('port')\n    opt_username = helper.get_arg('username')\n    opt_password = helper.get_arg('password')\n    opt_database = helper.get_arg('database')\n    opt_command = helper.get_arg('command')\n\n    for command in opt_command:\n        sourcetype = \"mongo:command:\" + command\n        try:\n            client = mongo_client.MongoClient(opt_ip, int(opt_port))\n            db = client[opt_database]\n            db.authenticate(opt_username, opt_password)\n            results = db.command(command)\n        except Exception as e:\n            helper.set_log_level(\"debug\")\n            helper.log_error(\"Mongodb \u94fe\u63a5\u5f02\u5e38\uff1a\"+str(e))\n            \n            helper.log_debug(json.dumps(results, default=str, ensure_ascii=False))\n\n\n            # if command == \"serverStatus\":\n            #     resultsData = dict(command=\"serverStatus\",\n            #                        mem=results['mem'],\n            #                        network=results['network'],\n            #                        pid=results['pid'],\n            #                        uptime=results['uptime'], version=results['version'],\n            #                        connections=results['connections'],\n            #                        extra_info=results['extra_info'], flowControl=results['flowControl'],\n            #                        opcounters=results['opcounters'], asserts=results['asserts'])\n            #\n            #     res = json.dumps(resultsData, default=str, ensure_ascii=False)\n            # else:\n            #     res = json.dumps(results, default=str, ensure_ascii=False)\n            # event = helper.new_event(res)\n            # ew.write_event(event)\n\n\n    \"\"\"\n    Implement your data collection logic here\n\n    # The following examples get the arguments of this input. \u591a\u5b9e\u4f8b\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_ip = helper.get_arg('ip')\n    opt_username = helper.get_arg('username')\n    opt_password = helper.get_arg('password')\n    opt_database = helper.get_arg('database')\n    opt_command = helper.get_arg('command')\n    \n    # In single instance mode, to get arguments of a particular input, use \u5355\u5b9e\u4f8b\n    opt_ip = helper.get_arg('ip', stanza_name)\n    opt_username = helper.get_arg('username', stanza_name)\n    opt_password = helper.get_arg('password', stanza_name)\n    opt_database = helper.get_arg('database', stanza_name)\n    opt_command = helper.get_arg('command', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "ip", "value": "192.168.0.20"}, {"name": "port", "value": "27017"}, {"name": "username", "value": "admin"}, {"name": "database", "value": "admin"}, {"name": "command", "value": ["serverStatus"]}], "uuid": "da9ddabfabee42cc876d6eaefdc7266f", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"mongodb:command": {"metadata": {"event_count": 0, "data_input_name": "mongodb_command_inputs", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}